{"name":"Helm","tagline":"yet another golang router.","body":"helm\r\n=======\r\n\r\nhelm is a simple, fast and minimalist router for writing web applications in Go. It builds on top of `net/http` and aims to be an elegant addition by removing some of the cumbersome work involved with using the default `net/http` mux.\r\n\r\n## Features\r\n\r\n- Simple API.\r\n- Middleware support built right in.\r\n- Great for building API servers.\r\n- Minimalist codebase at just a few hundred LOC. Great way to learn how to write your own router.\r\n- Inspired by Express.js.\r\n\r\n## Installation\r\n\r\n`go get github.com/acmacalister/helm`\r\n\r\n## Example\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n  \"fmt\"\r\n  \"net/http\"\r\n  \"net/url\"\r\n\r\n  \"github.com/acmacalister/helm\"\r\n)\r\n\r\nfunc main() {\r\n  r := helm.New(FallThrough)                    // Our fallthrough route.\r\n  r.AddMiddleware(FooMiddleware, BarMiddleware) // add global/router level middleware to run on every route.\r\n  r.Handle(\"GET\", \"/\", Root)\r\n  r.Handle(\"GET\", \"/users\", Users, AuthMiddleware)          // local/route specific middleware that only runs on this route.\r\n  r.Handle(\"GET\", \"/users/:name\", UserShow, AuthMiddleware) // same as above, but with a named param.\r\n  r.Handle(\"GET\", \"/users/:name/blog/new\", UserBlogShow, AuthMiddleware)\r\n  r.GET(\"/blogs\", Blogs) // convenience method for HTTP verb. Beside GET, there is the whole RESTful gang (POST, PUT, PATCH, DELETE, etc)\r\n  r.GET(\"/blogs/:id\", BlogShow)\r\n  http.ListenAndServe(\":8080\", r) // use our router as the mux!\r\n}\r\n\r\n// Notice the Middleware has a return type. True means go to the next middleware. False\r\n// means to stop right here. If you return false to end the request-response cycle you MUST\r\n// write something back to the client, otherwise it will be left hanging.\r\nfunc FooMiddleware(w http.ResponseWriter, r *http.Request, params url.Values) bool {\r\n  fmt.Println(\"Foo!\")\r\n  return true\r\n}\r\n\r\nfunc BarMiddleware(w http.ResponseWriter, r *http.Request, params url.Values) bool {\r\n  fmt.Println(\"Bar!\")\r\n  return true\r\n}\r\n\r\nfunc AuthMiddleware(w http.ResponseWriter, r *http.Request, params url.Values) bool {\r\n  fmt.Println(\"Doing Auth here\")\r\n  return true\r\n}\r\n\r\nfunc FallThrough(w http.ResponseWriter, r *http.Request, params url.Values) {\r\n  http.Error(w, \"You done messed up A-aron\", http.StatusNotFound)\r\n}\r\n\r\nfunc Root(w http.ResponseWriter, r *http.Request, params url.Values) {\r\n  fmt.Fprint(w, \"Root!\\n\")\r\n}\r\n\r\nfunc Users(w http.ResponseWriter, r *http.Request, params url.Values) {\r\n  fmt.Fprint(w, \"Users!\\n\")\r\n}\r\n\r\nfunc UserShow(w http.ResponseWriter, r *http.Request, params url.Values) {\r\n  fmt.Fprintf(w, \"Hi %s\", params[\"name\"]) // Notice we are able to get the username from the url resource. Quite handy!\r\n}\r\n\r\nfunc UserBlogShow(w http.ResponseWriter, r *http.Request, params url.Values) {\r\n  fmt.Fprintf(w, \"This is %s Blog\", params[\"name\"])\r\n}\r\n\r\nfunc Blogs(w http.ResponseWriter, r *http.Request, params url.Values) {\r\n  fmt.Fprint(w, \"Blogs!\\n\")\r\n}\r\n\r\nfunc BlogShow(w http.ResponseWriter, r *http.Request, params url.Values) {\r\n  fmt.Fprintf(w, \"Blog number: %s\", params[\"id\"])\r\n}\r\n\r\n```\r\n\r\n## Docs\r\n\r\n[godoc](http://godoc.org/github.com/acmacalister/helm)\r\n\r\n## Example Project\r\n\r\nCheck out the example directory for a simple example.\r\n\r\n## Why?\r\n\r\nThere are already a number of great routers and middleware out there for Go, but since most of them are either middlware or a router, getting them to work together felt clumsy to me. Helm's goal is to provide a minimalist set of tools to make building web services a breeze.\r\n\r\n## TODOs\r\n\r\n- [ ] Add Unit Tests\r\n- [ ] Add support for something like the express.js `all` method.\r\n\r\n## Contributing\r\n\r\nIf you are interested on helping out or have a feature suggestion, feel free to open an issue or do a PR.\r\n\r\n## Additional middleware\r\n\r\nhelm's middleware is quite simple as it is standard `net/http` functions that provides pre-parsed params. If you would like would to include a middleware that is compatibility with helm, open an issue and we will get it added.\r\n\r\n## License\r\n\r\nMIT\r\n\r\n## Contact\r\n\r\n\r\n### Austin Cherry ###\r\n* https://github.com/acmacalister\r\n* http://twitter.com/acmacalister\r\n* http://austincherry.me\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}